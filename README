	MakarnaX kernel 0.01

NELER VAR?

 - bellek yonetimi
    - fiziksel bellegin yonetilmesi
  	- sanal bellek (segmantasyon & paging)
  	- malloc fonksiyonu (kmalloc)
 - fork
 - execve
 - task scheduling
 - sistem cagrilari
 - Unix signalleri
 - ipc
    - shared memory
    - semaphore
 - sanal dosya sistemi
 - bellekte readonly dosya sistemi (open, read sistem cagrilari calisiyor)
 - kernel monitor ve debug modu: ctrl-alt-delete ile sistem duraklatilip,
   kaynaklar, process vb. gozlemlenebilir
 - test programlari (user_programs): sistem cagrilarini test etmek icin
   gelistirilmis programlar.
 - Kullanici programlari icin C library destegi (newlib)
 - Linux uzerinde calisabilen gcc cross compiler (i686-makarnax-gcc vb.)


NELER YOK?

 - copy-on-write fork
 - ipc
    - message queues
    - ipc permissions
 - disk uzerinde dosya sistemi
 - kullanicilar
 - socket
 - bircok sey ...


EKLENMIS SISTEM CAGRILARI

  fork, execve, getpid, exit, kill, pause, wait, signal, alarm, sleep, brk, sbrk

  open, close, read, stat, opendir, closedir, readdir, chdir, getcwd

  shmget, shmat, shmdt, sem_init, sem_wait, sem_post

  sys_cputs (printf), sys_cgetc (getchar), sys_yield


DIZINLER VE DOSYALAR:

  kernel: kernel kodlari

  user_programs: kullanici program ve kutuphaneleri
  	test: test programlari (C library olmadan derlenenler)
	bin: kullanici programlari
	lib: libmakarnax.a, crt0.o

  lib: kernel icerisinde kullanilan kutuphaneler. newlib kullanilmayan
    programlarda da kullanilabilir.

  include: kernel ve test programlari icin kullanilan include directory
    kernel: kernele ozel header dosyalari
	asm: assembly kodlari icin hazirlanmis inline fonksiyonlar
    user.h: test programlari icin (newlib kullanilmayanlarda)

  tools: kerneli ve programlari derlemek icin cesitli araclar ve kutuphaneler
    gcc_cross_compiler: makarnax icin gcc cross compiler ve newlibin bulundugu dizin

  init_programs: baslangicta calistirilacak programlarin listesi.
    bu dosya user_programs/test/init (/bin/init) tarafindan kullaniliyor.

  kernel_conf.h: kernel configrasyon dosyasi

  bin: derleme sonucunda olusturulan kernel'in bulundugu dizin

  doc: dokumantasyon

DERLEMEK:

  Derlemek icin, bir Linux dagitimi uzerinde make, gcc, g++ gibi standart
  C / C++ derlemek icin gerekli olan program ve copilerlar kurulu olmalidir.

  derlemek icin ana dizin icerisinden
      make

  farkli versiyon gcc ile derlemek icin:
      make CC=gcc-4.4 CXX=g++-4.4
  ya da
      export CC=gcc-4.4
      export CXX=g++-4.4
      make

  gcc 4.4 : calisiyor
  gcc 4.5 : calisiyor
  gcc 4.6 : calisiyor

CALISTIRMAK:

  MakarnaX sanal makinada ve gercek makinada calistirilabilir.


  Sanal Makinada Calistirmak (QEMU):
      make qemu


  Farkli Qemu versiyonu kullanmak:
      export QEMU=[qemu programi ve parametreleri]
	  make qemu
  yada
      make QEMU=[qemu programi ve parametreleri] qemu


  Baslangicta program calistirmak:
      programlar, init_programs isimli dosyaya eklenir
      her satir bir programi belirtir

      programlarin listesi: kernel/test_programs.h


  TODO: GDB ile calistirmak

  TODO: gercek makinada calistirmak



CALISTIRDIKTAN SONRA:
  Debug moduna gecmek icin,
      ctrl-alt-delete

  Acilan komut satirinda help yazarak komut listesini gorebilirsiniz.

  Debug komut satirindan kumutlar kullanilarak, kaynak kullanimi, process
  listesi gibi bilgilere ulasilabilir.


  Simdilik kerneli kullanmak icin fazla secenek yok. test programlarini
  calistirip, kernel test edilebilir.



TEST PROGRAMLARI:
  TODO: --