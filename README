TODO: create English README file

	MakarnaX kernel 0.01

NELER VAR?

 - bellek yonetimi
    - fiziksel bellegin yonetilmesi
  	- sanal bellek (segmantasyon & paging)
  	- malloc fonksiyonu (kmalloc)

 - fork

 - task scheduling

 - binary program calistirma: exec gibi fakat dosya sistemi olmadigi icin kernel
   dosyasina gomulmus executable elf dosyalarini kullanarak

 - sistem cagrilari

 - Unix signalleri

 - ipc
    - shared memory
    - semaphore

 - kernel monitor ve debug modu: ctrl-alt-delete ile sistem duraklatilip,
   kaynaklar, process vb. gozlemlenebilir

 - test programlari (user_programs): sistem cagrilarini test etmek icin
   kullanilan programlar.


NELER YOK?

 - copy-on-write fork

 - ipc
    - message queues
    - ipc permissions

 - dosya sistemi

 - kullanicilar

 - socket

 - bircok sey ...



SISTEM CAGRILARI VE FONKSIYONLAR

  int getpid();
  int exit(int error_code);
  int fork();
  sighandler_t signal(int signum, sighandler_t handler);
  unsigned int alarm(unsigned int seconds);
  int kill(int pid, int sig);
  int pause();
  int wait(int *status);
  int sys_ipc(unsigned int ipc_no, int a1, int a2, int a3, int a4);
  unsigned int sys_sleep(unsigned int seconds);
  int brk(void *addr);
  void *sbrk(unsigned int increment);

  void sys_cputs(const char *s, size_t len);
  int sys_cgetc();
  void sys_yield();

  key_t shmget(key_t key, size_t size, int shmflg);
  void *shmat(int shmid, const void *shmaddr, int shmflg);
  int shmdt(const void *shmaddr);

  int sem_init(sem_t *sem, int pshared, unsigned int value);
  int sem_wait(sem_t *sem);
  int sem_post(sem_t *sem);



KODLAR

  Kodlarda belli bir standart yok.  Biraz C++'in ozelliklerini iceriyor.
  Kodlarin bulundugu dizinler su sekilde.

  kernel : kernel kodlari

  user_programs : test etmek icin kullanilan kullanici programlari

  bin : derleme sonucunda olusturulan kernel'in bulundugu dizin

  doc : dokumantasyon

  include : kernel ve user programlari icin kullanilan include directory

  include/kernel : kernele ozel header dosyalari

  include/asm : assembly kodlari icin hazirlanmis inline fonksiyonlarin
  bulundugu dizin. Fonksiyonlarin bir kisimi user modda kullanilabilir

  include/*.h, include/sys/ : Standart C kutuphanesi vb. hem kernelde hem
  userda kullanilabilir.

  include/user.h : sistem cagrilarinin tanimli oldugu header. Sadece userda
  kullanilabilir.



DERLEMEK:

  Derlemek icin, bir Linux dagitimi uzerinde make, gcc, g++ gibi standart
  C / C++ derlemek icin gerekli olan program ve copilerlar kurulu olmalidir.

  derlemek icin ana dizin icerisinden
      make

  farkli versiyon gcc ile derlemek icin:
      make CC=gcc-4.4 CXX=g++-4.4
  ya da
      export CC=gcc-4.4
      export CXX=g++-4.4
      make

  gcc 4.4 : calisiyor
  gcc 4.5 : calisiyor
  gcc 4.6 : hatali (bug listesinde yaziyor)

CALISTIRMAK:

  MakarnaX sanal makinada ve gercek makinada calistirilabilir.


  Sanal Makinada Calistirmak (QEMU):
      make qemu


  Farkli Qemu versiyonu kullanmak:
      export QEMU=[qemu versiyonu] // export QEMU=qemu-kvm
	  make qemu

	  export QEMU=[qemu versiyonu]
      export QEMU_MEM=[ram boyutu] // export QEMU_MEM=128
	  make qemu


  Baslangicta program calistirmak:
      make run-[program adi]

      proglarin listesi: kernel/test_programs.h


  TODO: GDB ile calistirmak

  TODO: gercek makinada calistirmak



CALISTIRDIKTAN SONRA:
  Debug moduna gecmek icin,
      ctrl-alt-delete

  Acilan komut satirinda help yazarak komut listesini gorebilirsiniz.

  Debug komut satirindan kumutlar kullanilarak, kaynak kullanimi, process
  listesi gibi bilgilere ulasilabilir.


  Simdilik kerneli kullanmak icin fazla secenek yok. test programlarini
  calistirip, kernel test edilebilir.



TEST PROGRAMLARI:
  TODO: --